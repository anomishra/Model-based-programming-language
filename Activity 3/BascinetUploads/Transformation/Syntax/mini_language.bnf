USE_LR_PARSER

(* start symbol *)
stmtList

(* ================================================================================ *)
(*                                   statements                     	  	*)
(* ================================================================================	*)

<stmtList>		::= <stmt> <stmtList>
                          | <epsilon> 															.

<stmt>			::= <declaration> ";" 
                          | <assignment> ";" 
                          | <printStmt> ";" 
                          | <iterative> 
                          | <block> 
                          | <conditional>							.

<declaration>           ::= "int" id 
                          | "bool" id 
                          | "int" id "=" <expression> 
                          | "bool" id "=" <expression>										.
				  
<assignment>            ::= id "=" <expression> 
                          | "++" id 
                          | "--" id 
                          | id "++"
                          | id "--"															.
				  
<printStmt>		::= "print" <expression>											.

<block>			::= "{" <stmtList> "}"												.

<conditional>           ::= "if" <expression> "then" <block>
                          | "if" <expression> "then" <block> "else" <block>					.
				  
<iterative>		::= "while" <expression> <block>
                          | "for" <declaration> ";" <expression> ";" <assignment> <block>	.

(* ================================================================================ *)
(*                                  expressions                                   	*)
(* ================================================================================	*)				
<expression>            ::= <disjunction> 														.

<disjunction>		::= <conjuction> 
                          | <disjunction> "or" <conjuction>              .

<conjuction>            ::= <equality> 
                          | <conjuction> "and" <equality>       .       
				  													
				 
<equality>              ::= <add_sub> | <equality> "=" <add_sub>
                          | <equality> "!=" <add_sub> 
                          | <equality> ">" <add_sub> 
                          | <equality> "<" <add_sub>													.
				  
																
<add_sub>               ::= <product> 
                          | <add_sub> "+" <product> 
                          | <add_sub> "-" <product> .
                                        
																					  
<product>		::= <negation> 
                          | <product> "*" <negation> 
                          | <product> "div" <negation>
                          | <product> "mod" <negation>												.
				  
<negation>              ::= <exponent> 
                          | "not" <disjunction>
                          | "-" <add_sub>														.
				  
<exponent>		::= <base> 
                          | <base> "^" <exponent>																.
				  
<base>                  ::= integer 
                          | boolean 
                          | "(" <expression> ")" 
                          | "|" <add_sub> "|"
                          | id 
                          | "++" id 
                          | "--" id 
                          | id "++" 
                          | id "--"													.
				  														
<epsilon>               ::= .